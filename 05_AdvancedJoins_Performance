/*****************************************************************
FULL OUTER JOIN
*****************************************************************/
-- Ver teor√≠a en el word

-- Example: 
-- each account who has a sales rep and each sales rep that has an 
-- account (all of the columns in these returned rows will be full)
-- but also each account that does not have a sales rep and each 
-- sales rep that does not have an account (some of the columns in 
-- these returned rows will be empty)

SELECT a.id account_id, a.name account_name,
       s.id srep_id, s.name srep_name
FROM accounts a 
FULL OUTER JOIN sales_reps s
    ON a.sales_rep_id = s.id
-- WHERE a.sales_rep_id = NULL or s.id = NULL

/*****************************************************************
JOINS WITH COMPARISON OPERATORS
*****************************************************************/
-- START WITH A QUERY THAT TAKES THE FIRST ORDER FROM EACH ACCOUNT
-- See section "subqueries"
SELECT *
FROM orders o
WHERE DATE_TRUNC('month', o.occurred_at) =
    (SELECT DATE_TRUNC('month', MIN(o.occurred_at)) FROM orders)
ORDER BY o.occurred_at

-- Example 1
SELECT o.id,
       o.occurred_at as o_date,
       w.*
FROM orders o
LEFT JOIN web_events w
    -- even when using comparison operators, and = is often used
    -- to make sure that the proper rows are joined
    ON w.account_id = o.account_id
    -- comparison operator: each row is compared and those that
    -- evaluate to true are joined
    AND w.occurred_at < o.occurred_at
WHERE DATE_TRUNC('month', o.occurred_at) =
    (SELECT DATE_TRUNC('month', MIN(o.occurred_at)) FROM orders)
ORDER BY o.occurred_at

-- Example 2:
/*
COMPARISON OPERATORS AND STRINGS
Applied to strings, ocmparison perators use alphabetical order for
comparison
*/
SELECT a.name a_name, 
       a.primary_poc, 
       sr.name sr_name
FROM accounts a
LEFT JOIN sales_reps sr
    ON a.sales_rep_id = sr.id
    AND a.primary_poc < sr.name

/*****************************************************************
SELF JOINS
*****************************************************************/
-- sELF join CAN BE TRICKY.
-- Most of the time done in order to find cases where two events occur one after another
-- Example: which accounts made multiple orders within 30 days.

SELECT o1.id o1_id,
       o1.account_id o1_account_id,
       o1.occurred_at o1_occurred_at,
       o2.id o2_id,
       o2.account_id o2_account_id,
       o2.occurred_at o2_occurred_at
FROM orders o1
LEFT JOIN orders o2
    ON o1.account_id = o2.account_id
    AND o2.occurred_at > o1.occurred_at
    AND o2.occurred_at <= o1.occurred_at + INTERVAL '28 days'
ORDER BY o1.account_id, o1.occurred_at